"""Add indexes to article and category slugs

Revision ID: ab193c4b1e3f
Revises: 21213ef0877d
Create Date: 2025-09-14 01:39:24.917068

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ab193c4b1e3f'
down_revision = '21213ef0877d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('items', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_items_brand_id'))
        batch_op.drop_index(batch_op.f('idx_items_category_id'))
        batch_op.drop_index(batch_op.f('idx_items_specifications'), postgresql_using='gin')

    op.drop_table('items')
    op.drop_table('brands')
    op.drop_table('categories')
    with op.batch_alter_table('article', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_article_slug'), ['slug'], unique=False)

    with op.batch_alter_table('category', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('category_slug_key'), type_='unique')
        batch_op.create_index(batch_op.f('ix_category_slug'), ['slug'], unique=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('category', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_category_slug'))
        batch_op.create_unique_constraint(batch_op.f('category_slug_key'), ['slug'], postgresql_nulls_not_distinct=False)

    with op.batch_alter_table('article', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_article_slug'))

    op.create_table('categories',
    sa.Column('category_id', sa.INTEGER(), server_default=sa.text("nextval('categories_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('category_id', name='categories_pkey'),
    sa.UniqueConstraint('category_name', name='categories_category_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('brands',
    sa.Column('brand_id', sa.INTEGER(), server_default=sa.text("nextval('brands_brand_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('brand_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('brand_id', name='brands_pkey'),
    sa.UniqueConstraint('brand_name', name='brands_brand_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('items',
    sa.Column('item_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('item_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('brand_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('specifications', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['brand_id'], ['brands.brand_id'], name=op.f('items_brand_id_fkey')),
    sa.ForeignKeyConstraint(['category_id'], ['categories.category_id'], name=op.f('items_category_id_fkey')),
    sa.PrimaryKeyConstraint('item_id', name=op.f('items_pkey')),
    sa.UniqueConstraint('item_name', 'brand_id', name=op.f('items_item_name_brand_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('items', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_items_specifications'), ['specifications'], unique=False, postgresql_using='gin')
        batch_op.create_index(batch_op.f('idx_items_category_id'), ['category_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_items_brand_id'), ['brand_id'], unique=False)

    # ### end Alembic commands ###
